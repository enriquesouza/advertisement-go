// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/search": {
            "post": {
                "description": "Searches for advertisements by longitude, latitude, and maximum distance.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "advertisement"
                ],
                "summary": "Search by geo location with max distance",
                "parameters": [
                    {
                        "description": "Geo Location Request",
                        "name": "geoLocationRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handlers.GeoLocationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of advertisements within max distance",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Advertisement"
                            }
                        }
                    }
                }
            }
        },
        "/{longitude}/{latitude}": {
            "get": {
                "description": "Searches for advertisements by longitude and latitude.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "advertisement"
                ],
                "summary": "Search by geo location",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Longitude",
                        "name": "longitude",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Latitude",
                        "name": "latitude",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "A list of advertisements",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Advertisement"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Advertisement": {
            "description": "Advertisement structure with detailed advertisement information.",
            "type": "object",
            "properties": {
                "activeFlag": {
                    "type": "boolean"
                },
                "additionalInfo": {
                    "type": "string"
                },
                "advertisementDate": {
                    "description": "Pointer to time.Time for optional dates",
                    "type": "string"
                },
                "advertisementType": {
                    "type": "string"
                },
                "advertiserId": {
                    "type": "integer"
                },
                "availabilityDate": {
                    "type": "string"
                },
                "city": {
                    "type": "string"
                },
                "clientId": {
                    "type": "integer"
                },
                "dailyPrice": {
                    "description": "Using float32 for prices",
                    "type": "number"
                },
                "description": {
                    "type": "string"
                },
                "favoriteFlag": {
                    "type": "boolean"
                },
                "hourlyPrice": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "keywords": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "latitude": {
                    "type": "number"
                },
                "limit": {
                    "type": "integer"
                },
                "location": {
                    "description": "Replaces separate Latitude and Longitude fields",
                    "allOf": [
                        {
                            "$ref": "#/definitions/domain.Location"
                        }
                    ]
                },
                "longitude": {
                    "type": "number"
                },
                "miles": {
                    "type": "number"
                },
                "monthlyPrice": {
                    "type": "number"
                },
                "municipality": {
                    "type": "string"
                },
                "neighborhood": {
                    "type": "string"
                },
                "number": {
                    "type": "string"
                },
                "period": {
                    "type": "string"
                },
                "periodPrice": {
                    "type": "number"
                },
                "photos": {
                    "description": "Assuming Photos is an array of string. Adjust if the structure is different.",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "priceFrom": {
                    "type": "number"
                },
                "priceUntil": {
                    "type": "number"
                },
                "size": {
                    "type": "string"
                },
                "state": {
                    "type": "string"
                },
                "street": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "validAdvertisementFrom": {
                    "type": "string"
                },
                "validAdvertisementUntil": {
                    "type": "string"
                },
                "weeklyPrice": {
                    "type": "number"
                },
                "yearlyPrice": {
                    "type": "number"
                },
                "zipCode": {
                    "type": "string"
                }
            }
        },
        "domain.Location": {
            "type": "object",
            "properties": {
                "coordinates": {
                    "description": "longitude, latitude order",
                    "type": "array",
                    "items": {
                        "type": "number"
                    }
                },
                "type": {
                    "type": "string"
                }
            }
        },
        "handlers.GeoLocationRequest": {
            "type": "object",
            "properties": {
                "latitude": {
                    "type": "number"
                },
                "longitude": {
                    "type": "number"
                },
                "maxDistance": {
                    "description": "In Kilometers, fixed typo in struct tag",
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
